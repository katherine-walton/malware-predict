# -*- coding: utf-8 -*-
"""preprocess_encode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLxaR4UOBPA8JIs4A7sDoC46UgIt6guH
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

"""In the next section, we will specify the data-types of each column to save memory and load the full dataset faster."""

dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float32',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int16',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float64', # was 'float32'
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32', # was 'float16'
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

"""Next, we install the required Google packages to upload a file to Google Drive. Once uploaded, insert the "shareable link" from Drive into the link variable. Then, load the CSV."""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

link = 'https://drive.google.com/open?id=15uGxKz_9yVy-4zWgGOf2iTAKDwtZaSbh'
fluff, id = link.split('=')

downloaded = drive.CreateFile({'id':id}) 
downloaded.GetContentFile('data.csv')  
data = pd.read_csv('data.csv', dtype = dtypes)

"""From another preprocessing step, we already determined which columns were unneccesary, so to save space before we move on to more advanced preprocessing, we drop the columns before we split the data."""

def remove_missing_features(todelete, data):
	"""
	Removes features with large amounts of missing data.
	"""
	missing = []
	for x in range(0, len(data.columns)):
		totals = (sum (data.iloc[:,x].isnull()) ) / len(data)
		missing.append(totals)
		if totals > .60:
			todelete.append(data.columns[x])
	result = pd.DataFrame(missing, index = list(data.columns), columns=['Proportion of Missing Data'])
	result = result.sort_values(by=['Proportion of Missing Data'],ascending=False)
	print(result)
	# result.to_csv("MissingData.csv")
	return todelete

def remove_skewed_features(todelete,data):
    """
    This function will drop columns from the data whose majority category covers more than 99% of occurences.
    """
    sk_df = pd.DataFrame([{'column': c, 'uniq': data[c].nunique(), 'skewness': data[c].value_counts(normalize=True).values[0] * 100} for c in data.columns])
    sk_df = sk_df.sort_values('skewness', ascending = False)
    todelete.extend(sk_df[sk_df.skewness> 99].column.tolist())

    return todelete

def remove_correlated_features(todelete,data):
	"""
	Removes features that have high correlation with other features.
	"""
	corrmx = data.corr(method='pearson')
	cols = list(corrmx.columns)
	j = corrmx.shape[1]
	newtest = corrmx.to_numpy()
	col1=[]
	col2=[]
	corr=[]
	for x in range(j):
		for y in range(x+1, j):
			if abs(newtest[x,y]) > .80:
				col1.append(cols[x])
				col2.append(cols[y])
				corr.append(newtest[x,y])
				target_corrs = data[[cols[x],cols[y],'HasDetections']].corr()
				if target_corrs.iloc[0,2] >= target_corrs.iloc[1,2]:
					todelete.append(list(target_corrs.columns)[0])
				else:
					todelete.append(list(target_corrs.columns)[1])
	result = pd.DataFrame(np.column_stack([col1,col2,corr]),
						columns=['Feature 1','Feature 2','Correlation'])
	return todelete

# todelete = []
# todelete = remove_missing_features(todelete,data)
# todelete = remove_skewed_features(todelete, data)
# todelete = remove_correlated_features(todelete, data)
# todelete.append("MachineIdentifier")
# todelete = list(set(todelete))

"""['UacLuaenable', 'PuaMode', 'IsBeta', 'DefaultBrowsersIdentifier', 'Census_IsFlightsDisabled', 'AutoSampleOptIn', 'Census_ProcessorClass', 'Census_IsPortableOperatingSystem', 'Census_ThresholdOptIn', 'RtpStateBitfield', 'Census_IsVirtualDevice', 'Census_OSBuildNumber', 'Census_OSInstallLanguageIdentifier', 'MachineIdentifier', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_DeviceFamily', 'Census_IsFlightingInternal', 'SMode', 'Census_IsWIMBootEnabled']"""

todelete = ['UacLuaenable', 'PuaMode', 'IsBeta', 'DefaultBrowsersIdentifier', 'Census_IsFlightsDisabled', 'AutoSampleOptIn', 'Census_ProcessorClass', 'Census_IsPortableOperatingSystem', 'Census_ThresholdOptIn', 'RtpStateBitfield', 'Census_IsVirtualDevice', 'Census_OSBuildNumber', 'Census_OSInstallLanguageIdentifier', 'MachineIdentifier', 'Census_InternalPrimaryDisplayResolutionHorizontal', 'Census_DeviceFamily', 'Census_IsFlightingInternal', 'SMode', 'Census_IsWIMBootEnabled']

data = data.drop(todelete,axis=1)

"""Next, before we can encode the categorical variables, we have to get rid of missing data so it is compatible with sklearn."""

def impute_missing_data(data):
  cat_cols = data.select_dtypes(include='category').columns.tolist()
  for column in cat_cols:
    data[column] = data[column].fillna((data[column].mode()))
  data.fillna(data.mean().iloc[0],inplace=True)
  data.replace(['',np.inf,-np.inf],np.nan,inplace=True)
  data.dropna(how='any',inplace=True)

impute_missing_data(data)

categorical_columns = data.select_dtypes(include='category').columns.tolist()

"""Label Encoder can only work on one column at a time, so we iterate through each categorical column and transform it to labels"""

for col in categorical_columns:
  le = LabelEncoder()
  data[col] = le.fit_transform(data[col])

"""Here, we split the data in a training, validation, and test set, and ensure each set has similar proportions of classes."""

x = data.iloc[:,:-1]
y = data.iloc[:,-1:].values.ravel()
xTrain,xTest_v1,yTrain,yTest_v1 = train_test_split(x,y,random_state=334,
				stratify=y,train_size=0.6)
xTest,xValidation, yTest,yValidation = train_test_split(xTest_v1,
  yTest_v1, random_state=334, stratify=yTest_v1,train_size=0.5)

"""Next, we save the data to files in our Google Drive."""

print(xTrain.shape)
print(yTrain.shape)
print(xValidation.shape)
print(yValidation.shape)
print(xTest.shape)
print(yTest.shape)

xTrain.to_csv("xTrain.csv",index=False)

pd.DataFrame(yTrain).to_csv("yTrain.csv",index=False)

xTest.to_csv("xTest.csv",index=False)

pd.DataFrame(yTest).to_csv("yTest.csv",index=False)

xValidation.to_csv("xValidation.csv",index=False)

pd.DataFrame(yValidation).to_csv("yValidation.csv",index=False)

from google.colab import drive
drive.mount('/content/drive')

!cp xTest.csv drive/My\ Drive/

!cp xTrain.csv drive/My\ Drive/

!cp xValidation.csv drive/My\ Drive/

!cp yTest.csv drive/My\ Drive/

!cp yTrain.csv drive/My\ Drive/

!cp yValidation.csv drive/My\ Drive/

