import argparse
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# def missingfeat(train, droppable_features):
# 	(train.isnull().sum()/train.shape[0]).sort_values(ascending=False)
# 	# FINDS ALL OF THE CORRELATIONS

# def skewedfeat(data, droppable_features):
# 	pd.options.display.float_format = '{:,.4f}'.format
# 	sk_df = pd.DataFrame([{'column': c, 'uniq': train[c].nunique(), 'skewness': train[c].value_counts(normalize=True).values[0] * 100} for c in train.columns])
# 	sk_df = sk_df.sort_values('skewness', ascending=False)
# 	sk_df
# 	droppable_features.extend(sk_df[sk_df.skewness > 99].column.tolist())
# 	droppable_features

def calcheatmap(data):
	corrmx = data.corr(method='pearson')
	cols = list(corrmx.columns)
	j = corrmx.shape[1]
	newtest = corrmx.to_numpy()
	for x in range(j):
		for y in range(x+1, j):
			if abs(newtest[x,y]) > .90:
				print(str(cols[x]) + ", " + str(cols[y]) + ": " + str(newtest[x,y]))
	sns.set()
	#CREATES HEATMAP
	ax = sns.heatmap(corrmx,xticklabels=True, yticklabels=True,cmap='YlGnBu',vmin=-1,vmax=1)
	plt.show()

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("--trainFile",
						default="train.csv",
						help="filename of the training data")
	args = parser.parse_args()
	Train = pd.read_csv(args.trainFile, nrows=5000)
	print(Train)


if __name__ == "__main__":
	main()
