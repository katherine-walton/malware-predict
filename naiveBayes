import argparse
import numpy as np
import pandas as pd
import time
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.naive_bayes import ComplementNB
from sklearn.naive_bayes import BernoulliNB
from sklearn import metrics
from sklearn.metrics import roc_auc_score

def file_to_numpy(filename):
    """
    Read an input file and convert it to numpy
    """
    df = pd.read_csv(filename)
    return df.to_numpy()

def nb(model, xTrain, yTrain, xValid, yValid):
    model.fit(xTrain, yTrain)

    yHatTrain = model.predict_proba(xTrain)
    yHatValid = model.predict_proba(xValid)

    #print(xTrain)
    #print(yHatTrain)
    # calculate auc for training
    fpr, tpr, thresholds = metrics.roc_curve(yTrain[0], yHatTrain[:, 1])
    trainAuc = metrics.auc(fpr, tpr)
    # calculate auc for test dataset
    fpr, tpr, thresholds = metrics.roc_curve(yValid[0], yHatValid[:, 1])
    testAuc = metrics.auc(fpr, tpr)

    yHatValid=model.predict(xValid)
    testAuc = roc_auc_score(yValid, yHatValid)
    print(testAuc)


def main():
    """
    Main file to run from the command line.
    """
    # set up the program to take in arguments from the command line
    parser = argparse.ArgumentParser()
    parser.add_argument("xTrain",
                        help="filename for features of the training data")
    parser.add_argument("yTrain",
                        help="filename for labels associated with training data")
    parser.add_argument("xValid",
                        help="filename for features of the test data")
    parser.add_argument("yValid",
                        help="filename for labels associated with the test data")
    parser.add_argument("--seed", default=334, 
                        type=int, help="default seed number")
    
    args = parser.parse_args()
    # load the train and test data assumes you'll use numpy

    xTrain = pd.DataFrame(file_to_numpy(args.xTrain))
    yTrain = pd.DataFrame(file_to_numpy(args.yTrain))
    xValid = pd.DataFrame(file_to_numpy(args.xValid))
    yValid = pd.DataFrame(file_to_numpy(args.yValid))


    np.random.seed(args.seed)   
    
    model= GaussianNB()
    nb(model, xTrain, yTrain, xValid, yValid)

    model = MultinomialNB()
    nb(model, xTrain, yTrain, xValid, yValid)

    model = ComplementNB()
    nb(model, xTrain, yTrain, xValid, yValid)

    model = BernoulliNB()
    nb(model, xTrain, yTrain, xValid, yValid)

if __name__ == "__main__":
    main()

#Sources:
#https://www.analyticsvidhya.com/blog/2017/09/naive-bayes-explained/

#Had to delete Sample 69931 from xTrain/yTrain and Sample 511239 from xValid/yValid because negative values
